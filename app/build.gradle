apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
// For supporting/other modules apply plugin: 'com.android.library'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-kapt'


// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


android {

    signingConfigs {

        release {
            keyAlias keystoreProperties['KEY_ALIAS']
            keyPassword keystoreProperties['KEY_PASSWORD']
            storeFile file(keystoreProperties['STORE_FILE'])
            storePassword keystoreProperties['STORE_PASSWORD']
        }

//        debug {
//            keyAlias keystoreProperties['KEY_ALIAS_DEBUG']
//            keyPassword keystoreProperties['KEY_PASSWORD_DEBUG']
//            storeFile file(keystoreProperties['STORE_FILE_DEBUG'])
//            storePassword keystoreProperties['STORE_PASSWORD_DEBUG']
//        }
    }

    compileSdkVersion versions.compileSdk
    defaultConfig {
        applicationId names.applicationId
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk // match the compile one
        versionCode versionProperty.versionCode
        versionName versionProperty.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions names.flavourdimension

    productFlavors {
        live {
            resValue "string", "app_name", "Android Hub_" + versionProperty.versionName
        }
        dev {

            applicationIdSuffix ".dev"
            resValue "string", "app_name", "Android Hub (Dev)_" + versionProperty.versionName
        }
        uat {
            applicationIdSuffix ".uat"
            resValue "string", "app_name", "Android Hub (Uat)_" + versionProperty.versionName
        }
    }

    buildTypes {

        release {
            debuggable false
            // default is false -> code shrinking , removes dead code but does not obfuscate or optimize whereas proguard do both
//            shrinkResources true
            //default is false -> resource shrinking , requires minifyEnabled true
            // Stops the reverse engineering of your application//
//            useProguard true //default true -> code obfuscater// instead use r8 enable true , false in gradle.properties
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled = true
        }

        debug {
            //if you set useProguard false in your app module's build.gradle file, the Android Gradle plugin uses R8 to shrink your app's code for that build type, regardless of whether you disable R8 in your project's gradle.properties file.
//            useProguard false // instead use r8 enable true , false in gradle.properties
            // default is true -> disables proguard obfuscation butttt....minifyEnable can still be set true,
            pseudoLocalesEnabled true // generate pseudo locale
            debuggable true
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion = versions.buildtool


    dynamicFeatures = [":flashit", ":detection"]

}


dependencies {
    //tells the build system to include any
    //JAR files inside the app/libs/ directory in the compilation classpath and in the final package of
    //your app.
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    /* NEW DEPENDENCIES ADDED*/

    //RECYCLERVIEW
    api 'androidx.recyclerview:recyclerview:1.0.0'
    //Timber : Log library
    api 'com.jakewharton.timber:timber:4.7.1'
    //Firebase Crashlytics
    api 'com.google.firebase:firebase-core:17.2.0'
    api 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    //Kotlin
    api 'androidx.core:core-ktx:1.2.0-alpha04'

    // Libraries which can be re-used in other modules should use the `api` keyword.
    // This way they can be shared with dependent feature modules.
    api 'com.google.android.material:material:1.0.0'
    api "com.google.android.play:core:${versions.playcore}"
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
}

kapt {
    generateStubs = true
}

apply plugin: 'com.google.gms.google-services'
repositories {
    mavenCentral()
}
